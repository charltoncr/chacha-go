package chacha

import (
	"bytes"
	"io"
	"testing"
)

func TestChaCha(t *testing.T) {
	var key [32]byte
	var iv [8]byte
	c := New(key[:], iv[:], 20)

	// Official IETF test vectors for 20 rounds on a zero key and IV
	want := [...]byte{
		// block 1
		0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90,
		0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28,
		0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a,
		0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7,
		0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48, 0x8d,
		0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37,
		0x6a, 0x43, 0xb8, 0xf4, 0x15, 0x18, 0xa1, 0x1c,
		0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86,
		// block 2
		0x9f, 0x07, 0xe7, 0xbe, 0x55, 0x51, 0x38, 0x7a,
		0x98, 0xba, 0x97, 0x7c, 0x73, 0x2d, 0x08, 0x0d,
		0xcb, 0x0f, 0x29, 0xa0, 0x48, 0xe3, 0x65, 0x69,
		0x12, 0xc6, 0x53, 0x3e, 0x32, 0xee, 0x7a, 0xed,
		0x29, 0xb7, 0x21, 0x76, 0x9c, 0xe6, 0x4e, 0x43,
		0xd5, 0x71, 0x33, 0xb0, 0x74, 0xd8, 0x39, 0xd5,
		0x31, 0xed, 0x1f, 0x28, 0x51, 0x0a, 0xfb, 0x45,
		0xac, 0xe1, 0x0a, 0x1f, 0x4b, 0x79, 0x4d, 0x6f,
	}
	var got [128]byte
	c.XORKeyStream(got[:], got[:])
	if got != want {
		t.Errorf("XORKeyStream(), got %v, want %v", got, want)
	}

	// Test both Seek() and Read()
	c.Seek(1)
	c.Read(got[0:60]) // read a little short
	if !bytes.Equal(got[0:60], want[64:124]) {
		t.Errorf("Read(), got %v, want %v", got, want)
	}

	// Test for io.EOF when keystream exausted
	c.Seek(0xffffffffffffffff)
	n, err := c.Read(make([]byte, 70))
	if n != 64 {
		t.Errorf("Read(), got %v, want %v", n, 64)
	}
	if err != io.EOF {
		t.Errorf("Read(), got %v, want %v", err, io.EOF)
	}

	// Test for panic at end of keystream
	func() {
		defer func() {
			if r := recover(); r == nil {
				t.Errorf("XORKeyStream() did not panic")
			}
		}()
		c.XORKeyStream(got[:], got[:])
	}()
}

func BenchmarkChaCha(b *testing.B) {
	var key [32]byte
	var iv [8]byte
	var buf [64]byte
	c := New(key[:], iv[:], 20)
	for i := 0; i < b.N; i++ {
		c.XORKeyStream(buf[:], buf[:])
	}
}
